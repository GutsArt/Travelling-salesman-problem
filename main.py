import tkinter as tk
from tkinter import ttk, messagebox
from gui import TSPGui
from algorithms.brute_force import brute_force

# –ï—Å–ª–∏ –µ—Å—Ç—å –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º ‚Äî –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å
try:
    from algorithms.genetic import genetic_algorithm
except ImportError:
    genetic_algorithm = None


class TSPApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.configure(bg='black')
        self.root.title("–ó–∞–¥–∞—á–∞ –∫–æ–º—ñ–≤–æ—è–∂–µ—Ä–∞ ‚Äî –í–∏–±—ñ—Ä –º–µ—Ç–æ–¥—É")
        self.root.geometry("350x400")
        self.root.resizable(False, False)

        # ======== –í–∏–±—ñ—Ä –º–æ–≤–∏ ========
        """
        self.lang_var = tk.StringVar(value="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
        tk.Label(self.root, text="–ú–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:", font=("Arial", 12, "bold"), bg='black', fg='white').pack(pady=5)
        self.lang_menu = ttk.Combobox(
            self.root, textvariable=self.lang_var,
            values=["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "English", "Deutsch"],
            state="readonly", font=("Arial", 11)
        )
        self.lang_menu.pack(pady=5)
        """

        # ======== –í–∏–±—ñ—Ä –º–µ—Ç–æ–¥—É ========
        self.method_var = tk.StringVar(value="Brute Force")
        tk.Label(self.root, text="–í–∏–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è:", font=("Arial", 12, "bold"),bg='black', fg='white').pack(pady=10)
        self.method_menu = ttk.Combobox(
            self.root,
            textvariable=self.method_var,
            values=["Brute Force", "Genetic Algorithm"],
            state="readonly", font=("Arial", 11)
        )
        self.method_menu.pack(pady=5)
        self.method_menu.current(0)

        # ======== –í–∏–±—ñ—Ä –∫–∞—Ä—Ç–∏ ========
        self.map_var = tk.StringVar(value="–ë–µ–∑ –∫–∞—Ä—Ç–∏") # add your image as background
        tk.Label(self.root, text="–í–∏–±—ñ—Ä –∫–∞—Ä—Ç–∏:", font=("Arial", 12, "bold"),bg='black', fg='white').pack(pady=5)
        self.map_menu = ttk.Combobox(
            self.root, textvariable=self.map_var,
            values=["–ë–µ–∑ –∫–∞—Ä—Ç–∏", "–£–∫—Ä–∞—ó–Ω–∞", "–ù—ñ–º–µ—á—á–∏–Ω–∞"],
            state="readonly", font=("Arial", 11)
        )
        self.map_menu.pack(pady=5)
        self.map_menu.current(0)
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∑–º—ñ–Ω–∞ –º–µ–∂ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–∞—Ä—Ç–∏
        self.map_menu.bind("<<ComboboxSelected>>", self.on_map_change)


        # ======== –ú–µ–∂—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ========
        frame = tk.LabelFrame(self.root, text="–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", font=("Arial", 11, "bold"), labelanchor="nw")       
        frame.pack(pady=10)

        # X limits
        tk.Label(frame, text="X –≤—ñ–¥:", font=("Arial", 10)).grid(row=0, column=0, padx=5, pady=5, sticky="w")
        self.x_min = tk.Entry(frame, width=5)
        self.x_min.insert(0, "0")
        self.x_min.grid(row=0, column=1)

        tk.Label(frame, text="–¥–æ:", font=("Arial", 10)).grid(row=0, column=2, padx=5)
        self.x_max = tk.Entry(frame, width=5)
        self.x_max.insert(0, "100")
        self.x_max.grid(row=0, column=3)

        # Y limits
        tk.Label(frame, text="Y –≤—ñ–¥:", font=("Arial", 10)).grid(row=1, column=0, padx=5, pady=5, sticky="w")
        self.y_min = tk.Entry(frame, width=5)
        self.y_min.insert(0, "0")
        self.y_min.grid(row=1, column=1)

        tk.Label(frame, text="–¥–æ:", font=("Arial", 10)).grid(row=1, column=2, padx=5)
        self.y_max = tk.Entry(frame, width=5)
        self.y_max.insert(0, "100")
        self.y_max.grid(row=1, column=3)

        # --- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫—É ---
        tk.Button(
            self.root,
            text="–ü–æ—á–∞—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç",
            font=("Arial", 11, "bold"),
            bg="#333333",  # —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π
            fg="white",
            activebackground="#555555",
            activeforeground="white",
            padx=10, pady=5,
            command=self.start_app
        ).pack(pady=20)


        tk.Label(self.root, text="–ü—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –º–µ—Ç–æ–¥—É —ñ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–æ—á–æ–∫ –∑–∞–∫—Ä–∏–π –≤—ñ–∫–Ω–æ –∫–∞—Ä—Ç–∏", font=("Arial", 9), bg='black', fg='white').pack()
        tk.Label(self.root, text="¬© ArtG", font=("Arial", 9, "italic"), bg='black', fg='gray').pack(side="bottom", pady=5)
        
        self.root.mainloop()

    def on_map_change(self, event=None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–º—ñ–Ω—é—î –º–µ–∂—ñ X/Y –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ –∫–∞—Ä—Ç–∏"""
        choice = self.map_var.get()

        if choice == "–£–∫—Ä–∞—ó–Ω–∞":
            self.x_min.delete(0, tk.END)
            self.x_min.insert(0, "0")
            self.x_max.delete(0, tk.END)
            self.x_max.insert(0, "1200")

            self.y_min.delete(0, tk.END)
            self.y_min.insert(0, "0")
            self.y_max.delete(0, tk.END)
            self.y_max.insert(0, "848")

        elif choice == "–ù—ñ–º–µ—á—á–∏–Ω–∞":
            self.x_min.delete(0, tk.END)
            self.x_min.insert(0, "0")
            self.x_max.delete(0, tk.END)
            self.x_max.insert(0, "1555")

            self.y_min.delete(0, tk.END)
            self.y_min.insert(0, "0")
            self.y_max.delete(0, tk.END)
            self.y_max.insert(0, "2200")

        else:  # –ë–µ–∑ –∫–∞—Ä—Ç–∏
            self.x_min.delete(0, tk.END)
            self.x_min.insert(0, "0")
            self.x_max.delete(0, tk.END)
            self.x_max.insert(0, "100")

            self.y_min.delete(0, tk.END)
            self.y_min.insert(0, "0")
            self.y_max.delete(0, tk.END)
            self.y_max.insert(0, "100")


    def start_app(self):
        """–ó–∞–ø—É—Å–∫–∞—î –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–æ—á–æ–∫ —Ç–∞ –≤–∏–±—ñ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º—É"""
        method = self.method_var.get()
        map_choice = self.map_var.get()

        try:
            xlim = (float(self.x_min.get()), float(self.x_max.get()))
            ylim = (float(self.y_min.get()), float(self.y_max.get()))
        except ValueError:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–£–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —á–∏—Å–ª–æ–≤—ñ –º–µ–∂—ñ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.")
            return

        if xlim[0] >= xlim[1] or ylim[0] >= ylim[1]:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ!")
            return

        app = TSPGui(method, xlim=xlim, ylim=ylim, map_choice=map_choice)
        cities = app.input_points()

        if len(cities) < 2:
            messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", "–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ö–æ—á–∞ –± 2 —Ç–æ—á–∫–∏!")
            return

        print(f"üîπ –û–±—Ä–∞–Ω–æ –º–µ—Ç–æ–¥: {method}")
        print(f"üìè –ü–æ–ª–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: X={xlim}, Y={ylim}")

        if method == "Brute Force":
            route, dist = brute_force(cities)
        elif method == "Genetic Algorithm" and genetic_algorithm:
            route, dist = genetic_algorithm(cities)
        else:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"'{method}' —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π.")
            return

        app.show_route(route, dist)

        print("\nüöó –ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π –º–∞—Ä—à—Ä—É—Ç:", ' ‚Üí '.join(str(i + 1) for i in route))
        print(f"üìè –î–æ–≤–∂–∏–Ω–∞ –º–∞—Ä—à—Ä—É—Ç—É: {dist:.2f}")


if __name__ == "__main__":
    TSPApp()
