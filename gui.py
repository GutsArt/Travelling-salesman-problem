# gui.py
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os

plt.style.use('dark_background')


class TSPGui:
    def __init__(self, method, xlim=(0, 100), ylim=(0, 100), map_choice="–ë–µ–∑ –∫–∞—Ä—Ç–∏", figsize=(10, 8), fullscreen=False):
        self.method = method  # –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ main.py

        self.cities = []
        self.xlim = xlim
        self.ylim = ylim
        self.map_choice = map_choice


        self.figsize = figsize
        self.fullscreen = fullscreen
        self.fig = None
        self.cid = None

        self.maps_dir = os.path.join(os.path.dirname(__file__), "maps") # üìÇ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ "maps"


    def _load_map(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–æ–Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ (—è–∫—â–æ –æ–±—Ä–∞–Ω–æ)."""
        try:
            if self.map_choice == "–£–∫—Ä–∞—ó–Ω–∞":
                img_path = os.path.join(self.maps_dir, "ukraine.png")
                # img_path = "maps/ukraine.png"
            elif self.map_choice == "–ù—ñ–º–µ—á—á–∏–Ω–∞":
                img_path = os.path.join(self.maps_dir, "germany.png")
            else:
                return  # –ë–µ–∑ –∫–∞—Ä—Ç–∏

            img = mpimg.imread(img_path)
            plt.imshow(img, extent=[*self.xlim, *self.ylim], alpha=0.7)
        except FileNotFoundError:
            print(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª: {img_path}")

    def _reset_figure(self):
        """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É, –æ—Ç–∫–ª—é—á–∞—è —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
        # –µ—Å–ª–∏ –±—ã–ª –ø–æ–¥–∫–ª—é—á—ë–Ω —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º
        try:
            if self.fig is not None and self.cid is not None:
                try:
                    self.fig.canvas.mpl_disconnect(self.cid)
                except Exception:
                    pass
                plt.close(self.fig)
        except Exception:
            pass


        self.fig = plt.figure(f"–í–≤–µ–¥–µ–Ω–Ω—è –º—ñ—Å—Ç. –ú–µ—Ç–æ–¥: {self.method}, –ö–∞—Ä—Ç–∞: {self.map_choice}", figsize=self.figsize)
        ax = self.fig.add_subplot(111)
        plt.subplots_adjust(left=0.05, right=0.95, top=0.95, bottom=0.05)

        ax.set_xlim(*self.xlim)
        ax.set_ylim(*self.ylim)
        ax.grid(True, color='gray', alpha=0.3)
        ax.set_title(f"–î–æ–¥–∞–π –º—ñ—Å—Ç–∞ –∫–ª—ñ–∫–∞–º–∏ –º–∏—à—ñ. –ö–∞—Ä—Ç–∞ ({self.map_choice}). –ó–∞–∫—Ä–∏–π –≤—ñ–∫–Ω–æ, –∫–æ–ª–∏ –∑–∞–≤–µ—Ä—à–∏—à.", color='white')
        
        self._load_map()  # –≤—ã–∑–æ–≤ –∫–∞—Ä—Ç—ã

        if self.fullscreen:
            try:
                mng = plt.get_current_fig_manager()
                mng.window.state('zoomed')  # –¥–ª—è Windows
            except Exception:
                pass

        self.fig.canvas.draw()


    def onclick(self, event):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ"""
        if event.xdata is not None and event.ydata is not None:
            self.cities.append((event.xdata, event.ydata))
            plt.scatter(event.xdata, event.ydata, color='red')
            plt.text(event.xdata + 0.5, event.ydata + 0.5, str(len(self.cities)),
                     fontsize=12, color='cyan')
            plt.draw()

    def input_points(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ—á–µ–∫. –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å —á–∏—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏
        self.cities = []

        self._reset_figure()
        # –ø–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self.cid = self.fig.canvas.mpl_connect('button_press_event', self.onclick)
        plt.show()

        # –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        try:
            if self.fig is not None and self.cid is not None:
                try:
                    self.fig.canvas.mpl_disconnect(self.cid)
                except Exception:
                    pass
        except Exception:
            pass

        return self.cities

    def show_route(self, route, distance):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç.
           route –º–æ–∂–µ—Ç –±—ã—Ç—å:
             - –∑–∞–º–∫–Ω—É—Ç—ã–º: [0,1,2,0]
             - –Ω–µ–∑–∞–º–∫–Ω—É—Ç—ã–º: [0,1,2]  (—Ç–æ–≥–¥–∞ –º—ã –¥–æ–±–∞–≤–∏–º –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç)
        """
        if route is None:
            print("‚ö†Ô∏è –ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –¥–ª–∏–Ω—É
        n = len(self.cities)
        if n == 0:
            print("‚ö†Ô∏è –ù–µ—Ç —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        # –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –∑–∞–¥–∞–Ω –∫–∞–∫ –Ω–µ–∑–∞–º–∫–Ω—É—Ç—ã–π ‚Äî –∑–∞–º–∫–Ω—ë–º –µ–≥–æ
        if len(route) > 0 and route[0] != route[-1]:
            route = list(route) + [route[0]]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å 0..n-1
        if not all(isinstance(idx, int) and 0 <= idx < n for idx in route):
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (–∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–æ—á–∫–∞–º).")
            return

        plt.figure(F"–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç, –ú–µ—Ç–æ–¥: {self.method}", figsize=self.figsize)
        plt.clf() # –æ—á–∏—Å—Ç–∫–∞ –æ–∫–Ω–∞
        plt.xlim(*self.xlim)
        plt.ylim(*self.ylim)
        plt.grid(True, color='gray', alpha=0.3)
        self._load_map()  # —Ñ–æ–Ω –∫–∞—Ä—Ç—ã

        x = [self.cities[i][0] for i in route]
        y = [self.cities[i][1] for i in route]

        plt.plot(x, y, 'y-o', lw=2)
        for i, (cx, cy) in enumerate(self.cities):
            plt.text(cx + 0.5, cy + 0.5, str(i + 1), fontsize=12, color='cyan')

        plt.title(f"–ù–∞–π–∫–æ—Ä–æ—Ç—à–∏–π –º–∞—Ä—à—Ä—É—Ç (–¥–ª–∏–Ω–∞: {distance:.2f})", color='white')
        plt.xlabel("X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞", color='white')
        plt.ylabel("Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞", color='white')
        plt.show()
